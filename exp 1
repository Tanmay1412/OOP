
Implement a class Complex which represents the Complex Number data type. Implement 
the following 
1. Constructor (including a default constructor which creates the complex number 0+0i). 
2. Overload operator+ to add two complex numbers. 
3. Overload operator* to multiply two complex numbers. 
4. Overload operators << and >> to print and read Complex Numbers.


#include<iostream>
using namespace std;

class complex {
    float x, y;
    
public:
    complex() : x(0), y(0) {}

    complex operator+(const complex& c) const {
        complex temp;
        temp.x = x + c.x;
        temp.y = y + c.y;
        return temp;
    }

    complex operator*(const complex& c) const {
        complex temp;
        temp.x = (x * c.x) - (y * c.y);
        temp.y = (y * c.x) + (x * c.y);
        return temp;
    }

    friend istream& operator>>(istream& input, complex& t);
    friend ostream& operator<<(ostream& output, const complex& t);
};

istream& operator>>(istream& input, complex& t) {
    cout << "Enter the real part: ";
    input >> t.x;
    cout << "Enter the imaginary part: ";
    input >> t.y;
    return input;
}

ostream& operator<<(ostream& output, const complex& t) {
    output << t.x << "+" << t.y << "i";
    return output;
}

int main() {
    complex c1, c2, c3, c4;

    cout << "Default constructor value = ";
    cout << c1 << endl;

    cout << "\nEnter the 1st complex number:\n";
    cin >> c1;

    cout << "\nEnter the 2nd complex number:\n";
    cin >> c2;

    c3 = c1 + c2;
    c4 = c1 * c2;

    cout << "\nThe first complex number is: ";
    cout << c1 << endl;
    
    cout << "The second complex number is: ";
    cout << c2 << endl;
    
    cout << "The addition result is: ";
    cout << c3 << endl;
    
    cout << "The multiplication result is: ";
    cout << c4 << endl;

    return 0;
}
